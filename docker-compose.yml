version: "3"
services:
  #############
  ## SERVER ##
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    networks:
      - webapp
      - database
    depends_on:
      - postgres_db
    environment:
      - SECRET='¯\_(ツ)_/¯'
    restart: always
    command: ["./wait-for-it.sh", "postgres_db:5432", "--", "node", "main.js"]
    container_name: server
  #############
  ## CLIENT ##
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    networks:
      - webapp
    ports:
      - 80:80
      - 443:443
    volumes:
      # different path to html files than in tutorial
      - client:/usr/share/nginx/html
      # the line below causes nginx to break
      # somehow creates an empty conf.d folder,
      # so the is no config file for nginx
      # - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - dhparam:/etc/ssl/certs
    restart: always
    container_name: client
  ##############
  ## Certbot ##
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      # different path to html files than in tutorial and different
      # from client container. Volume is on left, container specific
      # filepath is on the right
      - client:/var/www/html
    depends_on:
      - client
    command: certonly --webroot --webroot-path=/var/www/html --email zacharym.schmidt@gmail.com --agree-tos --no-eff-email --force-renewal -d eiadataexchange.com -d www.eiadataexchange.com
  ##############
  ## POSTGRES ##
  postgres_db:
    # Added build section from docker-compose-dev
    build:
      context: ./postgres
      dockerfile: Dockerfile.dev
    image: postgres
    networks:
      - database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=demo
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./postgres_data/volume_sfo3_01:/var/lib/postgresql/data/
    restart: always
    container_name: postgres_db

volumes:
  # the other volumes listed under the services (postgres)
  # in the form of path/on/host:path/on/container are bind mounts, not volumes
  # so I don't include them below. perhaps I could implement them as volumes
  # but won't try now. the volume below are proper volumes, not
  # existing directories on the host. they will be created and managed
  # by docker.
  client:
  certbot-etc:
  certbot-var:
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: /home/zachary/test_deploy/dhparam/
      o: bind

networks:
  webapp:
    driver: bridge
  database:
    driver: bridge
